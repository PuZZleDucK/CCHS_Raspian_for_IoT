#!/usr/bin/env bash
# Copyright (c) 2013 All Right Reserved  Alec Clews
#
# author: Alec Clews
# alecclews@gmail.com
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#
#    Special thanks to @mikered for wifi set up code



# Add Check to encourage users to keep system up to date


echo 'APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true";};' | \
				sudo tee -a /etc/apt/apt.conf.d/15update-stamp > /dev/null

# Set initial check to every 7 days

echo '# Check apt-get is run every few days' |sudo tee /etc/profile.d/checkUpgrade.sh
echo 'no_of_days=7' |sudo tee -a /etc/profile.d/checkUpgrade.sh
echo 'no_of_seconds=$(($no_of_days*24*60*60))' |sudo tee -a /etc/profile.d/checkUpgrade.sh
echo 'if [[  ! -e /var/lib/apt/periodic/update-success-stamp ]] ||\' |sudo tee -a /etc/profile.d/checkUpgrade.sh
echo '	 (( ( $(date +%s) - $(stat -c %Y /var/lib/apt/periodic/update-success-stamp) ) > $no_of_seconds )) ; then' |\
            sudo tee -a /etc/profile.d/checkUpgrade.sh > /dev/null
echo '  echo It has been at least $no_of_days days since the last update' |sudo tee -a /etc/profile.d/checkUpgrade.sh > /dev/null
echo '  echo Please run \"sudo apt-get update \&\& sudo apt-get -y upgrade\"' |\
                 sudo tee -a /etc/profile.d/checkUpgrade.sh > /dev/null
echo fi | sudo tee -a /etc/profile.d/checkUpgrade.sh > /dev/null


echo
echo About to fully upgrade all relevant packages and optionally install others
echo This will take some time
echo

# In case the upgrade does nothing create the masrker file

sudo touch /var/lib/apt/periodic/update-success-stamp

# Make sure system is fully up to date
sudo apt-get -y dist-upgrade

ask() {
  read -p "$1" -r < /dev/tty
  echo $REPLY
}

# Install and enable i2c and SPI
sudo apt-get -y install i2c-tools lm-sensors python-smbus
sudo sed /etc/modprobe.d/raspi-blacklist.conf \
  -i -e 's/^#blacklist spi-bcm2708/blacklist spi-bcm2708/' \
  -e 's/^#blacklist i2c-bcm2708/blacklist i2c-bcm2708/'

sudo adduser $USER i2c

echo Installed support for I2C serial interface and LM sensors
echo added $USER to the i2c group
echo

echo 'We will now install a few useful development tools (editors, source code control etc.)'
sudo apt-get -y install vim git git-gui git-doc git-svn subversion screen tmux ack-grep emacs locate

if [[ $(ask "Do you wish to install the Wiring Pi library? (http://wiringpi.com/)[y/N] ") =~ ^[Yy]$ ]]
then

  # Install the WiringPi

  WP=/usr/src/wiringPi

  sudo mkdir -p $WP
  sudo chown $USER:$(id -g -n $USER) $WP

  pushd $WP

  git clone git://git.drogon.net/wiringPi .
  ./build

  cat <<EOF |sudo tee /usr/local/bin/updateWiringPi
#!/usr/bin/env sh
# Keep wiringPi updated

cd $WP
git pull origin &&
./build &&
echo WiringPi updated ||
echo WiringPi update failed
EOF

  sudo chmod + /usr/local/bin/updateWiringPi

  echo "To update the wiringPi library run the script /usr/local/bin/updateWiringPi as needed"
  echo

  popd
else
  echo
fi

if [[ $(ask "Do you wish to install the Robot OS? (http://ros.org)[y/N] ") =~ ^[Yy]$ ]]
then
  # Add repo for Robot operating System
  sudo sh -c 'echo \
    "deb http://64.91.227.57/repos/rospbian wheezy main" > \
  /etc/apt/sources.list.d/rospbian.list'
  wget http://64.91.227.57/repos/rospbian.key -O - | sudo apt-key add -


  sudo apt-get -y install ros-groovy-ros-comm \
    ros-groovy-rqt-gui ros-groovy-rqt-common-plugins \
    ros-groovy-roscpp-tutorials ros-groovy-turtlesim \
    ros-groovy-rosserial-arduino 

  echo '# Setup for ROS ' |sudo tee /etc/profile.d/ros.sh
  echo source /opt/ros/groovy/setup.bash |sudo tee -a  /etc/profile.d/ros.sh
else
  echo
fi

if [[ $(ask "Do you wish to install a Java Development Kit?[y/N] ") =~ ^[Yy]$ ]] ; then
  sudo apt-get -y install oracle-java8-jdk
else
  echo
fi


if [[ $(ask "Do you wish to install the Arduino IDE (NB Will install JDK if needed)? [y/N] ") =~ ^[Yy]$ ]] ; then
  sudo apt-get -y install oracle-java8-jdk arduino arduino-mk libdevice-serialport-perl
else
  echo
fi

if [[ $(ask "Do you wish to install the NodeBotes (NB Will install JDK if needed)? [y/N] ") =~ ^[Yy]$ ]] ;then
  sudo apt-get -y install oracle-java8-jdk
  sudo apt-get -y install minicom arduino arduino-mk libdevice-serialport-perl

  node_ver=v0.10.28   # Modify to lastest that works
  wget http://nodejs.org/dist/$node_ver/node-$node_ver-linux-arm-pi.tar.gz
  [[ -d /usr/local/node-$node_ver-linux-arm-pi ]] && sudo rm -rf /usr/local/node-$node_ver-linux-arm-pi
  sudo tar -zxpf node-$node_ver-linux-arm-pi.tar.gz -C /usr/local
  [[ -L /usr/local/node ]] && sudo rm /usr/local/node
  sudo ln -s /usr/local/node-$node_ver-linux-arm-pi /usr/local/node

  echo '# Setup for NodeBots ' |sudo tee /etc/profile.d/nodejs.sh
  echo 'NODE_JS_HOME=/usr/local/node; export NODE_JS_HOME' |sudo tee -a /etc/profile.d/nodejs.sh
  echo 'PATH=$PATH:$NODE_JS_HOME/bin' |sudo tee -a /etc/profile.d/nodejs.sh

  export NODE_JS_HOME=/usr/local/node
  PATH=$PATH:$NODE_JS_HOME/bin

  sudo -i npm install -g serialport
  sudo -i npm install -g firmata
  sudo -i npm install -g johnny-five
  sudo -i npm install -g socket.io
  sudo -i npm install -g raspo.io  
fi

# Remove anything out of date
sudo apt-get autoremove
# Save a few hundred Mb of disk space by removing downloaded deb archives
sudo apt-get clean

# Stop raspi-config from running on next reboot

[[ -e /etc/profile.d/raspi-config.sh ]] && sudo rm -f /etc/profile.d/raspi-config.sh

echo Please use sudo raspi-config to configure additional options and use sudo apt-get dist-upgrade on a regular basis
read -p "System will now reboot. Press any key to continue " -n 1 -r < /dev/tty

sudo shutdown -rF now # Force disk check
